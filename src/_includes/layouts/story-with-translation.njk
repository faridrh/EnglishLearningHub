---
layout: layouts/base.njk
---

<div class="container">
  <article class="page">
    <header class="page-header">
      <h1 class="page-title">{{ title }}</h1>
    </header>

    <div class="page-content">
      {{ content | safe }}
    </div>
  </article>
</div>

<style>
/* Translation tooltip styles */
.translation-tooltip {
  position: relative;
  cursor: help;
}

.translation-tooltip::after {
  content: attr(data-translation);
  position: absolute;
  bottom: 100%;
  left: 50%;
  transform: translateX(-50%);
  background-color: #2c3e50;
  color: white;
  padding: 8px 12px;
  border-radius: 6px;
  font-size: 14px;
  font-weight: normal;
  white-space: nowrap;
  opacity: 0;
  visibility: hidden;
  transition: opacity 0.3s, visibility 0.3s;
  z-index: 1000;
  pointer-events: none;
  box-shadow: 0 2px 8px rgba(0,0,0,0.2);
}

.translation-tooltip::before {
  content: "";
  position: absolute;
  bottom: 100%;
  left: 50%;
  transform: translateX(-50%) translateY(6px);
  border: 6px solid transparent;
  border-top-color: #2c3e50;
  opacity: 0;
  visibility: hidden;
  transition: opacity 0.3s, visibility 0.3s;
  z-index: 1000;
  pointer-events: none;
}

.translation-tooltip:hover::after,
.translation-tooltip:hover::before {
  opacity: 1;
  visibility: visible;
}

/* Enhanced styling for marked words with translations */
mark.translation-tooltip {
  background-color: #fff3cd;
  border-bottom: 2px dotted #ffc107;
  padding: 2px 4px;
  border-radius: 3px;
  transition: background-color 0.3s;
}

mark.translation-tooltip:hover {
  background-color: #fff8e1;
}

/* Mobile responsiveness */
@media (max-width: 768px) {
  .translation-tooltip::after {
    font-size: 12px;
    padding: 6px 8px;
    max-width: 200px;
    white-space: normal;
    text-align: center;
  }
}
</style>

<script>
// Enhanced translation functionality
document.addEventListener('DOMContentLoaded', function() {
  // Translation data from frontmatter
  const translations = {% if translations %}{{ translations | dump | safe }}{% else %}{}{% endif %};

  // Find all marked elements and add translation functionality
  const markedElements = document.querySelectorAll('mark[data-translation]');
  
  markedElements.forEach(element => {
    const translationKey = element.getAttribute('data-translation');
    
    if (translations && translations[translationKey]) {
      element.classList.add('translation-tooltip');
      element.setAttribute('data-translation', translations[translationKey]);
      element.setAttribute('title', `Azerbaijani: ${translations[translationKey]}`);
    }
  });

  // Fallback for elements without data-translation but with translations available
  const allMarkedElements = document.querySelectorAll('mark:not([data-translation])');
  allMarkedElements.forEach(element => {
    const text = element.textContent.trim().toLowerCase().replace(/[^\w\s]/g, '').replace(/\s+/g, '_');
    
    if (translations && translations[text]) {
      element.classList.add('translation-tooltip');
      element.setAttribute('data-translation', translations[text]);
      element.setAttribute('title', `Azerbaijani: ${translations[text]}`);
    }
  });

  // Add keyboard accessibility (show translation on focus)
  document.querySelectorAll('.translation-tooltip').forEach(element => {
    element.setAttribute('tabindex', '0');
    
    element.addEventListener('focus', function() {
      this.style.outline = '2px solid #007bff';
    });
    
    element.addEventListener('blur', function() {
      this.style.outline = 'none';
    });
  });
});
</script>